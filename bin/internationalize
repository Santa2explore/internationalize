#!/usr/bin/env ruby
 
$:.unshift File.join(File.dirname(__FILE__), *%w[.. lib])
 
help = <<HELP
******************************************************************************
Internationalize is a ruby library for transfering your local
Rails (-version > 3.0 ) project to an I18n format.

It will automatically extract hard-coded text from your ERB view file,
then choose a proper key and replace them with the I18n.translate method.
 
Basic Command Line Usage:
  internationalize <path_to_project_dir> [target path]
  
# using the following options:
 
HELP
 
require 'optparse'
require 'fileutils'
require 'internationalize'

def error_parameter
  puts "Invalid options. Run `internationalize --help` for assistance."
  exit(1)
end
 
options = {}
opts = OptionParser.new do |opts|
  opts.banner = help
  opts.on("--locale [LOCALE]", "Generating for the specified locale (default locale 'en')") do |locale|
    options['locale'] = locale unless locale.nil?
  end

  opts.on("--ext [EXTENSION]", "The file extension name of your views(default '.html.erb')") do |extension|
    options['extension'] = extension unless extension.nil?
  end
  
  opts.on("--dot","Generate a structured dictionary file and support `Lazy` Lookup of Rails > 2.3 ") do |dot|
    options['dot'] = true
  end
  
  opts.on("--nokey",
    "Output only the text found in your view files but not generate the keys. Normally used for the non-english project") do |nokey|
    options['nokey'] = true
  end

  opts.on('--keymap <extracted_locale_text_file>:<english_key_file>',
    "Using two files for the key mapping from locale text extracted(with --nokey) to english. Separated by the colon ':'") do |mapper|
    error_parameter if mapper.split(':').size != 2
    options['keymap'] = mapper
  end
end
 
# Read command line options into `options` hash
opts.parse!
 
# Get source and destintation from command line
case ARGV.size
  when 1
    options['source']      = ARGV[0]
  when 2
    options['source']      = ARGV[0]
    options['destination'] = ARGV[1]
  else
    error_parameter
end
 
# Run the i18n generating
Internationalize::I18nGenerator.execute(options)
